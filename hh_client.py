import requests
import json
import time
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)


class HeadHunterClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API HeadHunter"""
    
    BASE_URL = "https://api.hh.ru"
    
    def __init__(self, email: str = None, password: str = None):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'HH-Job-Bot/1.0 (your@email.com)',
            'Content-Type': 'application/json'
        })
        self.email = email
        self.password = password
        self.access_token = None
        
    def search_vacancies(self, 
                        text: str, 
                        area: int = 1,  # 1 = –ú–æ—Å–∫–≤–∞, 2 = –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
                        per_page: int = 20,
                        period: int = 1) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            text: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            area: ID —Ä–µ–≥–∏–æ–Ω–∞ (1 - –ú–æ—Å–∫–≤–∞)
            per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            period: –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏—Å–∫–∞—Ç—å (1-30)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
        """
        try:
            params = {
                'text': text,
                'area': area,
                'per_page': per_page,
                'period': period,
                'order_by': 'publication_time',  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
            }
            
            response = self.session.get(
                f"{self.BASE_URL}/vacancies",
                params=params
            )
            response.raise_for_status()
            
            data = response.json()
            vacancies = data.get('items', [])
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}'")
            return vacancies
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            return []
    
    def get_vacancy_details(self, vacancy_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            response = self.session.get(f"{self.BASE_URL}/vacancies/{vacancy_id}")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}: {e}")
            return None
    
    def apply_to_vacancy(self, 
                        vacancy_id: str, 
                        resume_id: str, 
                        cover_letter: str) -> bool:
        """
        –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
        
        –í–ê–ñ–ù–û: –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω—É–∂–µ–Ω OAuth —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏.
        –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OAuth 2.0 –Ω–∞ hh.ru
        
        Args:
            vacancy_id: ID –≤–∞–∫–∞–Ω—Å–∏–∏
            resume_id: ID —Ä–µ–∑—é–º–µ
            cover_letter: –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            if not self.access_token:
                logger.warning("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù—É–∂–Ω–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ hh.ru")
                return False
            
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'vacancy_id': vacancy_id,
                'resume_id': resume_id,
                'message': cover_letter
            }
            
            response = self.session.post(
                f"{self.BASE_URL}/negotiations",
                headers=headers,
                json=data
            )
            
            if response.status_code == 201:
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é {vacancy_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é {vacancy_id}: {e}")
            return False
    
    def get_my_resumes(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.access_token:
                logger.warning("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return []
            
            headers = {'Authorization': f'Bearer {self.access_token}'}
            response = self.session.get(
                f"{self.BASE_URL}/resumes/mine",
                headers=headers
            )
            response.raise_for_status()
            
            return response.json().get('items', [])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
            return []
    
    def filter_suitable_vacancies(self, 
                                  vacancies: List[Dict],
                                  min_salary: int = None,
                                  required_skills: List[str] = None) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        
        Args:
            vacancies: –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
            min_salary: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
            required_skills: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        filtered = []
        
        for vacancy in vacancies:
            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ
            if min_salary:
                salary = vacancy.get('salary')
                if salary and salary.get('from'):
                    if salary['from'] < min_salary:
                        continue
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –Ω–∞–≤—ã–∫–∞–º, –æ–ø—ã—Ç—É –∏ —Ç.–¥.
            filtered.append(vacancy)
        
        return filtered


def format_vacancy_info(vacancy: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    name = vacancy.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    employer = vacancy.get('employer', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
    
    salary_info = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    if vacancy.get('salary'):
        salary = vacancy['salary']
        if salary.get('from') and salary.get('to'):
            salary_info = f"{salary['from']:,} - {salary['to']:,} {salary.get('currency', 'RUB')}"
        elif salary.get('from'):
            salary_info = f"–û—Ç {salary['from']:,} {salary.get('currency', 'RUB')}"
        elif salary.get('to'):
            salary_info = f"–î–æ {salary['to']:,} {salary.get('currency', 'RUB')}"
    
    url = vacancy.get('alternate_url', '')
    
    text = f"""
üìã <b>{name}</b>

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {employer}
üí∞ {salary_info}
üîó –°—Å—ã–ª–∫–∞: {url}
"""
    return text.strip()
