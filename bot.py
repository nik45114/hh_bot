import asyncio
import json
import logging
import os
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

import config
from hh_client import HeadHunterClient, format_vacancy_info
from cover_letter_generator import CoverLetterGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class JobBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru"""
    
    def __init__(self):
        self.hh_client = HeadHunterClient(config.HH_EMAIL, config.HH_PASSWORD)
        self.cover_letter_gen = CoverLetterGenerator(config.OPENAI_API_KEY)
        
        self.is_running = False
        self.applications_count = 0
        self.applications_today = 0
        self.last_reset_date = datetime.now().date()
        
        self.state = self.load_state()
        
    def load_state(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config.STATE_FILE):
                with open(config.STATE_FILE, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        return {
            'is_running': False,
            'applications_count': 0,
            'processed_vacancies': [],
            'settings': {
                'keywords': config.SEARCH_KEYWORDS,
                'interval': config.SEARCH_INTERVAL_MINUTES,
                'max_per_day': config.MAX_APPLICATIONS_PER_DAY
            }
        }
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            state = {
                'is_running': self.is_running,
                'applications_count': self.applications_count,
                'processed_vacancies': self.state.get('processed_vacancies', []),
                'settings': self.state.get('settings', {})
            }
            with open(config.STATE_FILE, 'w') as f:
                json.dump(state, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def reset_daily_counter(self):
        """–°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤"""
        today = datetime.now().date()
        if today > self.last_reset_date:
            self.applications_today = 0
            self.last_reset_date = today
            logger.info("–°–±—Ä–æ—à–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = str(update.effective_user.id)
        
        if config.ALLOWED_USER_ID and user_id != config.ALLOWED_USER_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
            [InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='stop_search')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ GitHub", callback_data='update_repo')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ <b>HH Job Bot</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru.

<b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
"""
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        if config.ALLOWED_USER_ID and user_id != config.ALLOWED_USER_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        action = query.data
        
        if action == 'start_search':
            await self.start_search(query)
        elif action == 'stop_search':
            await self.stop_search(query)
        elif action == 'stats':
            await self.show_stats(query)
        elif action == 'settings':
            await self.show_settings(query)
        elif action == 'update_repo':
            await self.update_from_github(query)
        elif action == 'help':
            await self.show_help(query)
        elif action == 'back_to_menu':
            await self.show_main_menu(query)
    
    async def start_search(self, query):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        if self.is_running:
            await query.edit_message_text(
                "‚ÑπÔ∏è –ü–æ–∏—Å–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                ]])
            )
            return
        
        self.is_running = True
        self.save_state()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–∏—Å–∫–∞
        asyncio.create_task(self.search_and_apply_loop(query.message.chat_id))
        
        await query.edit_message_text(
            "‚úÖ –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(self.state['settings']['keywords'])}\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.state['settings']['interval']} –º–∏–Ω\n"
            f"üìä –õ–∏–º–∏—Ç –≤ –¥–µ–Ω—å: {self.state['settings']['max_per_day']}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    async def stop_search(self, query):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        if not self.is_running:
            await query.edit_message_text(
                "‚ÑπÔ∏è –ü–æ–∏—Å–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                ]])
            )
            return
        
        self.is_running = False
        self.save_state()
        
        await query.edit_message_text(
            "‚è∏ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.reset_daily_counter()
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìù –û—Ç–∫–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self.applications_today}/{self.state['settings']['max_per_day']}
üìà –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {self.applications_count}
üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(self.state.get('processed_vacancies', []))}

Status: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
"""
        
        await query.edit_message_text(
            stats_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    async def show_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings = self.state['settings']
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
{', '.join(settings['keywords'])}

‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings['interval']} –º–∏–Ω
üìä –ú–∞–∫—Å–∏–º—É–º –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å: {settings['max_per_day']}

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.
"""
        
        await query.edit_message_text(
            settings_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    async def update_from_github(self, query):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ GitHub"""
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ GitHub...")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º git pull
            result = subprocess.run(
                ['git', 'pull', 'origin', 'main'],
                cwd='/home/claude/hh_bot',
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                await query.edit_message_text(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"<code>{result.stdout}</code>\n\n"
                    "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                    ]])
                )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n<code>{result.stderr}</code>",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                    ]])
                )
        
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                ]])
            )
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
1. –ò—â–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
2. –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é AI
4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
‚Ä¢ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —Ñ–∞–π–ª .env –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏ resume_data.py —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b>
–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω—É–∂–Ω–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ hh.ru.
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://github.com/hhru/api
"""
        
        await query.edit_message_text(
            help_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
            [InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='stop_search')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ GitHub", callback_data='update_repo')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def search_and_apply_loop(self, chat_id):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤"""
        application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        
        while self.is_running:
            try:
                self.reset_daily_counter()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤
                if self.applications_today >= self.state['settings']['max_per_day']:
                    logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤")
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚è∏ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ ({self.state['settings']['max_per_day']})"
                    )
                    await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å
                    continue
                
                # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
                for keyword in self.state['settings']['keywords']:
                    if not self.is_running:
                        break
                    
                    logger.info(f"–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {keyword}")
                    vacancies = self.hh_client.search_vacancies(keyword, per_page=10)
                    
                    for vacancy in vacancies:
                        if not self.is_running:
                            break
                        
                        vacancy_id = vacancy.get('id')
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                        if vacancy_id in self.state.get('processed_vacancies', []):
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
                        details = self.hh_client.get_vacancy_details(vacancy_id)
                        if not details:
                            continue
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏
                        vacancy_text = format_vacancy_info(vacancy)
                        await application.bot.send_message(
                            chat_id=chat_id,
                            text=f"üîç –ù–∞–π–¥–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:\n{vacancy_text}",
                            parse_mode='HTML'
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
                        cover_letter = self.cover_letter_gen.generate_cover_letter(
                            job_title=details.get('name', ''),
                            company_name=details.get('employer', {}).get('name', ''),
                            job_description=details.get('description', '')
                        )
                        
                        if cover_letter:
                            await application.bot.send_message(
                                chat_id=chat_id,
                                text=f"üìù –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n\n{cover_letter[:500]}..."
                            )
                        
                        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
                        # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ hh.ru
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                        if 'processed_vacancies' not in self.state:
                            self.state['processed_vacancies'] = []
                        self.state['processed_vacancies'].append(vacancy_id)
                        self.save_state()
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞–∫–∞–Ω—Å–∏–π
                        await asyncio.sleep(30)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.state['settings']['interval']} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞")
                await asyncio.sleep(self.state['settings']['interval'] * 60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–∏—Å–∫–∞: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if not config.TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    if not config.OPENAI_API_KEY:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω OPENAI_API_KEY - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    job_bot = JobBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", job_bot.start_command))
    application.add_handler(CallbackQueryHandler(job_bot.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
