import asyncio
import json
import logging
import os
import subprocess
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

import config
from hh_client import HeadHunterClient, format_vacancy_info
from cover_letter_generator import CoverLetterGenerator
from storage.database import Database
from prompts import get_default_prompt
from resume_data import RESUME_DATA

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Conversation states
WAITING_FOR_KEYWORDS = 1
WAITING_FOR_CITY = 2
WAITING_FOR_SALARY = 3
WAITING_FOR_PROMPT = 4

# Vacancy action prefix
VACANCY_PREFIX = "vac_"

# Areas mapping (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞)
POPULAR_AREAS = {
    '–ú–æ—Å–∫–≤–∞': 1,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 2,
    '–†–æ—Å—Å–∏—è': 113,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 3,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 4,
    '–ö–∞–∑–∞–Ω—å': 88,
    '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': 66
}

# Role levels for Management
ROLE_LEVELS = [
    '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
    'Project Manager',
    'Program Manager', 
    'Product Manager',
    'Team Lead',
    '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    'Head of',
    'CTO/CIO'
]


class JobBot:
    """Telegram –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ hh.ru"""
    
    def __init__(self):
        self.hh_client = HeadHunterClient(
            config.HH_EMAIL, 
            config.HH_PASSWORD,
            config.HH_ACCESS_TOKEN
        )
        self.cover_letter_gen = CoverLetterGenerator(config.OPENAI_API_KEY) if config.OPENAI_API_KEY else None
        self.db = Database(config.DATABASE_FILE)
        
        # Active search tasks per user
        self.active_searches = {}
        
        # Temporary storage for current vacancies per user
        self.current_vacancies = {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        if config.ALLOWED_USER_ID and str(user_id) != config.ALLOWED_USER_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        self.db.get_or_create_user(user_id, username)
        await self.show_main_menu(update.message)
    
    async def show_main_menu(self, message, edit=False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        chat_id = message.chat_id if hasattr(message, 'chat_id') else message.chat.id
        prefs = self.db.get_preferences(chat_id)
        auto_apply_status = "‚úÖ –í–∫–ª" if prefs.get('auto_apply') else "‚ùå –í—ã–∫–ª"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data='main_search')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", callback_data='main_criteria')],
            [InlineKeyboardButton("‚úçÔ∏è –ü—Ä–æ–º–ø—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∞", callback_data='main_prompt')],
            [InlineKeyboardButton(f"ü§ñ –ê–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫: {auto_apply_status}", callback_data='main_autoapply')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='main_stats')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='main_help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ <b>HH Job Bot - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π</b>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (IT/–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª—ë–Ω–∫–∞)
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å AI  
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
‚úÖ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞–º–∏ –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
"""
        
        if edit:
            await message.edit_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if config.ALLOWED_USER_ID and str(user_id) != config.ALLOWED_USER_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        action = query.data
        
        # Main menu actions
        if action == 'main_search':
            await self.handle_search_menu(query)
        elif action == 'main_criteria':
            await self.handle_criteria_menu(query)
        elif action == 'main_prompt':
            await self.handle_prompt_menu(query)
        elif action == 'main_autoapply':
            await self.toggle_auto_apply(query)
        elif action == 'main_stats':
            await self.show_stats(query)
        elif action == 'main_help':
            await self.show_help(query)
        elif action == 'back_to_menu':
            await self.show_main_menu(query.message, edit=True)
        
        # Criteria actions
        elif action.startswith('criteria_'):
            await self.handle_criteria_action(query, action, context)
        
        # Search actions
        elif action.startswith('search_'):
            await self.handle_search_action(query, action)
        
        # Prompt actions
        elif action.startswith('prompt_'):
            await self.handle_prompt_action(query, action, context)
        
        # Vacancy actions
        elif action.startswith(VACANCY_PREFIX):
            await self.handle_vacancy_action(query, action, context)
    
    # === CRITERIA MANAGEMENT ===
    
    async def handle_criteria_menu(self, query):
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
        prefs = self.db.get_preferences(query.message.chat_id)
        
        domain_emoji = "üíº" if prefs.get('role_domain') == 'Management' else "üíª"
        remote_emoji = "‚úÖ" if prefs.get('remote_only') else "‚ùå"
        
        criteria_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞</b>

{domain_emoji} <b>–°—Ñ–µ—Ä–∞:</b> {prefs.get('role_domain', 'IT')}
üåç <b>–ì–æ—Ä–æ–¥:</b> {prefs.get('city', '–ú–æ—Å–∫–≤–∞')}
üè† <b>–¢–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–∫–∞:</b> {remote_emoji}
üìù <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(prefs.get('keywords', [])) or '–Ω–µ –∑–∞–¥–∞–Ω—ã'}
üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç:</b> {prefs.get('salary_min', 0)} —Ä—É–±.
üëî <b>–£—Ä–æ–≤–µ–Ω—å:</b> {prefs.get('role_level') or '–Ω–µ –∑–∞–¥–∞–Ω'}
"""
        
        keyboard = [
            [InlineKeyboardButton("üíº/üíª –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ñ–µ—Ä—É", callback_data='criteria_domain')],
            [InlineKeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data='criteria_city')],
            [InlineKeyboardButton("üè† –¢–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–∫–∞ –≤–∫–ª/–≤—ã–∫–ª", callback_data='criteria_remote')],
            [InlineKeyboardButton("üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data='criteria_keywords')],
            [InlineKeyboardButton("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", callback_data='criteria_salary')],
            [InlineKeyboardButton("üëî –£—Ä–æ–≤–µ–Ω—å/—Ä–æ–ª—å", callback_data='criteria_level')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(criteria_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_criteria_action(self, query, action, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        chat_id = query.message.chat_id
        
        if action == 'criteria_domain':
            keyboard = [
                [InlineKeyboardButton("üíª IT", callback_data='set_domain_IT')],
                [InlineKeyboardButton("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='set_domain_Management')],
                [InlineKeyboardButton("üîß –î—Ä—É–≥–æ–µ", callback_data='set_domain_Other')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_criteria')]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action.startswith('set_domain_'):
            domain = action.replace('set_domain_', '')
            self.db.update_preferences(chat_id, role_domain=domain)
            await query.answer(f"–°—Ñ–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {domain}")
            await self.handle_criteria_menu(query)
        
        elif action == 'criteria_remote':
            prefs = self.db.get_preferences(chat_id)
            new_value = not prefs.get('remote_only', False)
            self.db.update_preferences(chat_id, remote_only=new_value, schedule='remote' if new_value else 'fullDay')
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await query.answer(f"–¢–æ–ª—å–∫–æ —É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {status}")
            await self.handle_criteria_menu(query)
        
        elif action == 'criteria_city':
            keyboard = []
            for city, area_id in POPULAR_AREAS.items():
                keyboard.append([InlineKeyboardButton(city, callback_data=f'set_city_{area_id}_{city}')])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_criteria')])
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action.startswith('set_city_'):
            parts = action.replace('set_city_', '').split('_', 1)
            area_id = int(parts[0])
            city = parts[1]
            self.db.update_preferences(chat_id, city=city, area_id=area_id)
            await query.answer(f"–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {city}")
            await self.handle_criteria_menu(query)
        
        elif action == 'criteria_level':
            keyboard = []
            for level in ROLE_LEVELS:
                keyboard.append([InlineKeyboardButton(level, callback_data=f'set_level_{level}')])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_criteria')])
            
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å/—Ä–æ–ª—å:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif action.startswith('set_level_'):
            level = action.replace('set_level_', '')
            self.db.update_preferences(chat_id, role_level=level)
            await query.answer(f"–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {level}")
            await self.handle_criteria_menu(query)
        
        elif action == 'criteria_keywords':
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Django, API\n"
                "–∏–ª–∏: –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            context.user_data['waiting_for'] = 'keywords'
            
        elif action == 'criteria_salary':
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–≤ —Ä—É–±–ª—è—Ö).\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 150000\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            context.user_data['waiting_for'] = 'salary'
    
    # === PROMPT MANAGEMENT ===
    
    async def handle_prompt_menu(self, query):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        prefs = self.db.get_preferences(query.message.chat_id)
        custom_prompt = prefs.get('prompt')
        default_prompt = get_default_prompt(prefs.get('role_domain', 'IT'))
        
        if custom_prompt:
            prompt_preview = custom_prompt[:200] + "..." if len(custom_prompt) > 200 else custom_prompt
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç"
        else:
            prompt_preview = default_prompt[:200] + "..." if len(default_prompt) > 200 else default_prompt
            status = "üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
        
        text = f"""
‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º</b>

{status}

<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>
<code>{prompt_preview}</code>

–ü—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å –ø–æ–º–æ—â—å—é AI.
"""
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data='prompt_edit')],
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data='prompt_reset')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    async def handle_prompt_action(self, query, action, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        if action == 'prompt_reset':
            self.db.update_preferences(query.message.chat_id, prompt=None)
            await query.answer("–ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            await self.handle_prompt_menu(query)
        elif action == 'prompt_edit':
            await query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º.\n\n"
                "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
                "‚Ä¢ {vacancy_title} - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
                "‚Ä¢ {company_name} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "‚Ä¢ {user_name} - –≤–∞—à–µ –∏–º—è\n"
                "‚Ä¢ {skills} - –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
            )
            context.user_data['waiting_for'] = 'prompt'
    
    # === SEARCH AND VACANCY HANDLING ===
    
    async def handle_search_menu(self, query):
        """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
        prefs = self.db.get_preferences(query.message.chat_id)
        
        search_text = f"""
üîç <b>–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π</b>

<b>–¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:</b>
‚Ä¢ –°—Ñ–µ—Ä–∞: {prefs.get('role_domain', 'IT')}
‚Ä¢ –ì–æ—Ä–æ–¥: {prefs.get('city', '–ú–æ—Å–∫–≤–∞')}
‚Ä¢ –£–¥–∞–ª—ë–Ω–∫–∞: {'–î–∞' if prefs.get('remote_only') else '–õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç'}
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(prefs.get('keywords', [])) or '–Ω–µ –∑–∞–¥–∞–Ω—ã'}
‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {prefs.get('salary_min', 0)} —Ä—É–±.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–µ–π—á–∞—Å", callback_data='search_now')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ]
        
        await query.edit_message_text(search_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')
    
    async def handle_search_action(self, query, action):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∏—Å–∫–∞"""
        if action == 'search_now':
            await query.edit_message_text("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            await self.perform_search(query.message.chat_id, query.message)
    
    async def perform_search(self, chat_id: int, message):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
        try:
            prefs = self.db.get_preferences(chat_id)
            
            # Build search parameters
            keywords = prefs.get('keywords', [])
            search_text = ' '.join(keywords) if keywords else prefs.get('role_level', '')
            
            if not search_text and prefs.get('role_domain') == 'Management':
                search_text = '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä'
            elif not search_text:
                search_text = 'python developer'
            
            # Search vacancies
            vacancies = self.hh_client.search_vacancies(
                text=search_text,
                area=prefs.get('area_id', 1),
                schedule=prefs.get('schedule', 'remote') if prefs.get('remote_only') else None,
                experience=prefs.get('experience', 'between3And6'),
                employment=prefs.get('employment', 'full'),
                salary=prefs.get('salary_min', 0) if prefs.get('salary_min') > 0 else None,
                per_page=10
            )
            
            if not vacancies:
                await message.reply_text(
                    "üòî –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                )
                return
            
            # Filter already processed
            new_vacancies = [v for v in vacancies if not self.db.is_vacancy_processed(chat_id, v['id'])]
            
            if not new_vacancies:
                await message.reply_text(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π, –Ω–æ –≤—Å–µ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ."
                )
                return
            
            # Store vacancies for this user
            self.current_vacancies[chat_id] = new_vacancies
            
            await message.reply_text(
                f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(new_vacancies)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!\n"
                f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∫–∞–∑..."
            )
            
            # Show vacancies one by one
            for i, vacancy in enumerate(new_vacancies, 1):
                await self.show_vacancy_card(chat_id, vacancy, i, len(new_vacancies), message)
                await asyncio.sleep(1)  # Small delay between messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            await message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {str(e)}"
            )
    
    async def show_vacancy_card(self, chat_id: int, vacancy: Dict, position: int, total: int, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        vacancy_text = format_vacancy_info(vacancy)
        header = f"üìã –í–∞–∫–∞–Ω—Å–∏—è {position} –∏–∑ {total}\n\n"
        
        # Check auto-apply setting
        prefs = self.db.get_preferences(chat_id)
        auto_apply = prefs.get('auto_apply', False)
        
        if auto_apply:
            # Auto-apply mode - apply automatically
            result = await self.apply_to_vacancy(chat_id, vacancy)
            status_icon = "‚úÖ" if result.get('success') else "‚ùå"
            await message.reply_text(
                f"{header}{vacancy_text}\n\n"
                f"{status_icon} <b>–ê–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫:</b> {result.get('message')}",
                parse_mode='HTML'
            )
        else:
            # Manual mode - show buttons
            vacancy_id = vacancy['id']
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"{VACANCY_PREFIX}apply_{vacancy_id}")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{VACANCY_PREFIX}skip_{vacancy_id}")],
                [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=vacancy.get('alternate_url', ''))]
            ]
            
            await message.reply_text(
                f"{header}{vacancy_text}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
    
    async def handle_vacancy_action(self, query, action, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        chat_id = query.message.chat_id
        vacancy_id = action.split('_')[-1]
        
        if action.startswith(f"{VACANCY_PREFIX}apply_"):
            # Find vacancy in current vacancies
            vacancies = self.current_vacancies.get(chat_id, [])
            vacancy = next((v for v in vacancies if v['id'] == vacancy_id), None)
            
            if not vacancy:
                await query.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            await query.edit_message_text(f"{query.message.text}\n\n‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–∫–ª–∏–∫...")
            
            result = await self.apply_to_vacancy(chat_id, vacancy)
            
            status_icon = "‚úÖ" if result.get('success') else "‚ùå"
            await query.edit_message_text(
                f"{query.message.text}\n\n"
                f"{status_icon} <b>–û—Ç–∫–ª–∏–∫:</b> {result.get('message')}",
                parse_mode='HTML'
            )
            
        elif action.startswith(f"{VACANCY_PREFIX}skip_"):
            self.db.mark_vacancy_processed(chat_id, vacancy_id)
            await query.edit_message_text(
                f"{query.message.text}\n\n"
                f"‚è≠ –í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞",
                parse_mode='HTML'
            )
    
    async def apply_to_vacancy(self, chat_id: int, vacancy: Dict) -> Dict:
        """–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
        try:
            vacancy_id = vacancy['id']
            prefs = self.db.get_preferences(chat_id)
            
            # Check if HH token and resume are configured
            if not config.HH_ACCESS_TOKEN:
                return {
                    'success': False,
                    'message': '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ HH.ru. –°–º. /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.'
                }
            
            if not config.HH_RESUME_ID:
                return {
                    'success': False,
                    'message': '–ù–µ —É–∫–∞–∑–∞–Ω ID —Ä–µ–∑—é–º–µ. –°–º. /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.'
                }
            
            # Get vacancy details
            details = self.hh_client.get_vacancy_details(vacancy_id)
            if not details:
                return {
                    'success': False,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏'
                }
            
            # Generate cover letter
            if self.cover_letter_gen:
                cover_letter = self.cover_letter_gen.generate_cover_letter(
                    job_title=details.get('name', ''),
                    company_name=details.get('employer', {}).get('name', ''),
                    job_description=details.get('description', ''),
                    custom_prompt=prefs.get('prompt'),
                    role_domain=prefs.get('role_domain', 'IT'),
                    schedule=details.get('schedule', {}).get('id'),
                    location=details.get('area', {}).get('name')
                )
            else:
                cover_letter = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è {details.get('name', '')}. {RESUME_DATA['summary']}"
            
            if not cover_letter:
                cover_letter = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ {details.get('name', '')}."
            
            # Apply to vacancy
            result = self.hh_client.apply_to_vacancy(
                vacancy_id=vacancy_id,
                resume_id=config.HH_RESUME_ID,
                cover_letter=cover_letter
            )
            
            # Log application
            status = 'success' if result.get('success') else 'failed'
            self.db.log_application(
                chat_id=chat_id,
                vacancy_id=vacancy_id,
                vacancy_title=details.get('name', ''),
                company_name=details.get('employer', {}).get('name', ''),
                cover_letter=cover_letter,
                status=status,
                error_message=None if result.get('success') else result.get('message')
            )
            
            # Mark as processed
            self.db.mark_vacancy_processed(chat_id, vacancy_id)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {e}")
            return {
                'success': False,
                'message': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
            }
    
    # === STATS AND INFO ===
    
    async def show_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        chat_id = query.message.chat_id
        
        # Get today's applications
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_count = self.db.get_applications_count(chat_id, since=today)
        total_count = self.db.get_applications_count(chat_id)
        
        # Get recent applications
        recent = self.db.get_recent_applications(chat_id, limit=5)
        
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìù –û—Ç–∫–ª–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_count}
üìà –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {total_count}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏:</b>
"""
        
        if recent:
            for app in recent:
                status_icon = "‚úÖ" if app['status'] == 'success' else "‚ùå"
                date = app['applied_at'][:10] if app['applied_at'] else "–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                stats_text += f"\n{status_icon} {app['vacancy_title']} - {date}"
        else:
            stats_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def toggle_auto_apply(self, query):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫–∞"""
        chat_id = query.message.chat_id
        prefs = self.db.get_preferences(chat_id)
        
        new_value = not prefs.get('auto_apply', False)
        self.db.update_preferences(chat_id, auto_apply=new_value)
        
        status = "–≤–∫–ª—é—á—ë–Ω" if new_value else "–≤—ã–∫–ª—é—á–µ–Ω"
        await query.answer(f"–ê–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫ {status}")
        await self.show_main_menu(query.message, edit=True)
    
    async def show_help(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/criteria - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
/search - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
/prompt - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º
/apply_on - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫
/apply_off - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (—Å—Ñ–µ—Ä–∞, –≥–æ—Ä–æ–¥, —É–¥–∞–ª—ë–Ω–∫–∞, –∑–∞—Ä–ø–ª–∞—Ç–∞)
2Ô∏è‚É£ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
4Ô∏è‚É£ –ë–æ—Ç –Ω–∞–π–¥—ë—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
5Ô∏è‚É£ –í —Ä–µ–∂–∏–º–µ –∞–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫–∞ –±–æ—Ç –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HH.ru API:</b>

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω—É–∂–Ω—ã:
‚Ä¢ HH_ACCESS_TOKEN - OAuth —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ HH_RESUME_ID - ID –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ

<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:</b>
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ https://dev.hh.ru/admin
2. –ü–æ–ª—É—á–∏—Ç–µ Client ID –∏ Client Secret
3. –ü—Ä–æ–π–¥–∏—Ç–µ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
4. –ü–æ–ª—É—á–∏—Ç–µ access_token

<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID —Ä–µ–∑—é–º–µ:</b>
–ß–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å GET https://api.hh.ru/resumes/mine
—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Authorization: Bearer YOUR_TOKEN

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://github.com/hhru/api

<b>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env):</b>
‚Ä¢ TELEGRAM_BOT_TOKEN - —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
‚Ä¢ OPENAI_API_KEY - –∫–ª—é—á OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å–µ–º
‚Ä¢ HH_ACCESS_TOKEN - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ HH API
‚Ä¢ HH_RESUME_ID - ID —Ä–µ–∑—é–º–µ

–ü—Ä–∏–º–µ—Ä: —Å–º. —Ñ–∞–π–ª .env.example
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]]
        
        await query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    # === ADDITIONAL COMMANDS ===
    
    async def criteria_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /criteria"""
        query = Update(update_id=0, callback_query=update.callback_query)
        query.callback_query = type('obj', (object,), {
            'message': update.message,
            'from_user': update.effective_user,
            'answer': lambda: asyncio.sleep(0),
            'edit_message_text': update.message.edit_text if hasattr(update.message, 'edit_text') else update.message.reply_text
        })()
        await self.handle_criteria_menu(query.callback_query)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /search"""
        chat_id = update.effective_user.id
        await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
        await self.perform_search(chat_id, update.message)
    
    async def prompt_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /prompt"""
        query = Update(update_id=0, callback_query=update.callback_query)
        query.callback_query = type('obj', (object,), {
            'message': update.message,
            'from_user': update.effective_user,
            'answer': lambda: asyncio.sleep(0),
            'edit_message_text': update.message.edit_text if hasattr(update.message, 'edit_text') else update.message.reply_text
        })()
        await self.handle_prompt_menu(query.callback_query)
    
    async def apply_on_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /apply_on"""
        self.db.update_preferences(update.effective_user.id, auto_apply=True)
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫ –≤–∫–ª—é—á—ë–Ω")
    
    async def apply_off_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /apply_off"""
        self.db.update_preferences(update.effective_user.id, auto_apply=False)
        await update.message.reply_text("‚ùå –ê–≤—Ç–æ-–æ—Ç–∫–ª–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        query = Update(update_id=0, callback_query=update.callback_query)
        query.callback_query = type('obj', (object,), {
            'message': update.message,
            'from_user': update.effective_user,
            'answer': lambda: asyncio.sleep(0),
            'edit_message_text': update.message.edit_text if hasattr(update.message, 'edit_text') else update.message.reply_text
        })()
        await self.show_stats(query.callback_query)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        query = Update(update_id=0, callback_query=update.callback_query)
        query.callback_query = type('obj', (object,), {
            'message': update.message,
            'from_user': update.effective_user,
            'answer': lambda: asyncio.sleep(0),
            'edit_message_text': update.message.edit_text if hasattr(update.message, 'edit_text') else update.message.reply_text
        })()
        await self.show_help(query.callback_query)
    
    # === TEXT MESSAGE HANDLERS ===
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö)"""
        chat_id = update.effective_user.id
        text = update.message.text
        
        waiting_for = context.user_data.get('waiting_for')
        
        if waiting_for == 'keywords':
            keywords = [kw.strip() for kw in text.split(',')]
            self.db.update_preferences(chat_id, keywords=keywords)
            await update.message.reply_text(
                f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(keywords)}"
            )
            context.user_data.pop('waiting_for', None)
            
        elif waiting_for == 'salary':
            try:
                salary = int(text)
                self.db.update_preferences(chat_id, salary_min=salary)
                await update.message.reply_text(
                    f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {salary:,} —Ä—É–±."
                )
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
                )
            context.user_data.pop('waiting_for', None)
            
        elif waiting_for == 'prompt':
            self.db.update_preferences(chat_id, prompt=text)
            await update.message.reply_text(
                "‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
                f"–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {text[:200]}..."
            )
            context.user_data.pop('waiting_for', None)
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cancel"""
        context.user_data.pop('waiting_for', None)
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if not config.TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    if not config.OPENAI_API_KEY:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω OPENAI_API_KEY - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    if not config.HH_ACCESS_TOKEN:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω HH_ACCESS_TOKEN - –æ—Ç–∫–ª–∏–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    if not config.HH_RESUME_ID:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω HH_RESUME_ID - –æ—Ç–∫–ª–∏–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    job_bot = JobBot()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", job_bot.start_command))
    application.add_handler(CommandHandler("criteria", job_bot.criteria_command))
    application.add_handler(CommandHandler("search", job_bot.search_command))
    application.add_handler(CommandHandler("prompt", job_bot.prompt_command))
    application.add_handler(CommandHandler("apply_on", job_bot.apply_on_command))
    application.add_handler(CommandHandler("apply_off", job_bot.apply_off_command))
    application.add_handler(CommandHandler("stats", job_bot.stats_command))
    application.add_handler(CommandHandler("help", job_bot.help_command))
    application.add_handler(CommandHandler("cancel", job_bot.cancel_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(job_bot.button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, job_bot.handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
